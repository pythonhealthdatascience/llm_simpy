(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ nbdiff 09_iteration_s2.ipynb diffs/09_iteration_s2_for_diff.ipynb
nbdiff 09_iteration_s2.ipynb diffs/09_iteration_s2_for_diff.ipynb
--- 09_iteration_s2.ipynb  2024-07-11 00:59:10.636930
+++ diffs/09_iteration_s2_for_diff.ipynb  2024-07-11 01:36:22.207416
## modified /cells/12/source:
@@ -1,6 +1,5 @@
 import simpy
 import numpy as np
-import math
 import matplotlib.pyplot as plt
 
 # [Include all the existing classes and functions here: PatientType, Experiment, AcuteStrokeUnit]
@@ -11,17 +10,23 @@ def calculate_occupancy_frequencies(occupancy_list):
     cumulative_freq = np.cumsum(relative_freq)
     return relative_freq, cumulative_freq, unique_values
 
-def occupancy_plot(relative_freq, unique_values, x_label="No. people in ASU", figsize=(12, 5)):
+def calculate_prob_delay(relative_freq, cumulative_freq):
+    rel_freq = np.array(relative_freq)
+    cum_freq = np.array(cumulative_freq)
+    return rel_freq / cum_freq
+
+def prob_delay_plot(prob_delay, unique_values, x_label="No. acute beds available", figsize=(12, 5)):
     fig, ax = plt.subplots(figsize=figsize)
-    ax.bar(unique_values, relative_freq)
+    ax.step(unique_values, prob_delay, where='post')
     ax.set_xlabel(x_label)
-    ax.set_ylabel("Relative Frequency")
-    ax.set_title("ASU Occupancy Distribution")
+    ax.set_ylabel("Probability of Delay")
+    ax.set_title("Probability of Delay vs. Number of Acute Beds Available")
     ax.set_xticks(range(0, 31))
     ax.set_xlim(0, 30)
+    ax.set_ylim(0, 1)
     return fig, ax
 
-def run_model_with_audit():
+def run_model_and_plot():
     # Create the experiment
     experiment = Experiment({
         'run_length': 365*5,  # Run for 5 years
@@ -49,7 +54,7 @@ def run_model_with_audit():
     print(f"Average occupancy: {sum(experiment.asu_occupancy) / len(experiment.asu_occupancy):.2f}")
     print(f"Maximum occupancy: {max(experiment.asu_occupancy)}")
     print(f"Minimum occupancy: {min(experiment.asu_occupancy)}")
-    print(f"Simulation time at end of run: {env.now}")
+    print(f"Simulation time at end of run: {env.now = }")
 
     for patient_type in asu.patient_types.values():
         print(f"Total {patient_type.name} arrivals: {patient_type.count}")
@@ -57,9 +62,12 @@ def run_model_with_audit():
     # Calculate occupancy frequencies
     rel_freq, cum_freq, unique_vals = calculate_occupancy_frequencies(experiment.asu_occupancy)
 
-    # Create and display the occupancy plot
-    fig, ax = occupancy_plot(rel_freq, unique_vals)
+    # Calculate probability of delay
+    prob_delay = calculate_prob_delay(rel_freq, cum_freq)
+
+    # Create and display the probability of delay plot
+    fig, ax = prob_delay_plot(prob_delay, unique_vals)
     plt.show()
 
 if __name__ == "__main__":
-    run_model_with_audit()
+    run_model_and_plot()

(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$