## inserted before /cells/12:
+  code cell:
+    id: c622b680-523c-4757-9ed8-aa3613eb49ee
+    source:
+      class RehabilitationUnit:
+          def __init__(self, env, stroke_iat=21.8, complex_neuro_iat=31.7, other_iat=28.6):
+              self.env = env
+              self.total_arrivals = 0
+              self.patient_counts = {
+                  'Stroke': 0,
+                  'Complex Neurological': 0,
+                  'Other': 0
+              }
+              
+              # Inter-arrival time means (in days)
+              self.stroke_iat_external = stroke_iat
+              self.complex_neuro_iat_external = complex_neuro_iat
+              self.other_iat_external = other_iat
+              
+              # Start patient generators
+              self.env.process(self.stroke_generator())
+              self.env.process(self.complex_neuro_generator())
+              self.env.process(self.other_generator())
+          
+          def stroke_generator(self):
+              while True:
+                  yield self.env.timeout(np.random.exponential(self.stroke_iat_external))
+                  self.patient_arrival('Stroke')
+          
+          def complex_neuro_generator(self):
+              while True:
+                  yield self.env.timeout(np.random.exponential(self.complex_neuro_iat_external))
+                  self.patient_arrival('Complex Neurological')
+          
+          def other_generator(self):
+              while True:
+                  yield self.env.timeout(np.random.exponential(self.other_iat_external))
+                  self.patient_arrival('Other')
+          
+          def patient_arrival(self, patient_type):
+              patient_id = self.total_arrivals
+              self.total_arrivals += 1
+              self.patient_counts[patient_type] += 1
+              
+              print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type}) arrived at RU")
+              print(f"  Total arrivals: {self.total_arrivals}")
+              print(f"  {patient_type} arrivals: {self.patient_counts[patient_type]}")
+              print(f"  Current patient counts: {self.patient_counts}")
+              
+              # Patient immediately leaves the model
+              print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type}) left RU")
+  code cell:
+    id: b147f6b0-a24c-49f5-8c8f-0dd933e56ed0
+    source:
+      def calculate_occupancy_frequencies(occupancy_list):
+          unique_values, counts = np.unique(occupancy_list, return_counts=True)
+          relative_freq = counts / len(occupancy_list)
+          cumulative_freq = np.cumsum(relative_freq)
+          return relative_freq, cumulative_freq, unique_values
+      
+      def occupancy_plot(relative_freq, unique_values, x_label="No. people in ASU", figsize=(12, 5)):
+          fig, ax = plt.subplots(figsize=figsize)
+          ax.bar(unique_values, relative_freq)
+          ax.set_xlabel(x_label)
+          ax.set_ylabel("Relative Frequency")
+          ax.set_title("ASU Occupancy Distribution")
+          ax.set_xticks(range(0, 31))
+          ax.set_xlim(0, 30)
+          return fig, ax
+      
+      def calculate_prob_delay(relative_freq, cumulative_freq):
+          rel_freq = np.array(relative_freq)
+          cum_freq = np.array(cumulative_freq)
+          return rel_freq / cum_freq
+      
+      def prob_delay_plot(prob_delay, unique_values, x_label="No. acute beds available", figsize=(12, 5)):
+          fig, ax = plt.subplots(figsize=figsize)
+          ax.step(unique_values, prob_delay, where='post')
+          ax.set_xlabel(x_label)
+          ax.set_ylabel("Probability of Delay")
+          ax.set_title("Probability of Delay vs. Number of Acute Beds Available")
+          ax.set_xticks(range(0, 31))
+          ax.set_xlim(0, 30)
+          ax.set_ylim(0, 1)
+          return fig, ax
+  code cell:
+    id: 381e38ac-f927-4c95-a9a4-db8e9780eebf
+    source:
+      def run_model_with_audit():
+          # Create the experiment
+          experiment = Experiment({
+              'run_length': 365*5,  # Run for 5 years
+              'trace': False,  # Set to True if you want to see detailed logs
+              'acute_audit_interval': 1  # Audit every 1 day
+          })
+      
+          # Create the simulation environment
+          env = simpy.Environment()
+      
+          # Create the AcuteStrokeUnit
+          asu = AcuteStrokeUnit(env, experiment)
+      
+          # Start the audit process
+          env.process(experiment.audit_acute_occupancy(env, experiment.params['acute_audit_interval'], asu))
+      
+          # Run the model
+          asu.run()
+      
+          # Print the results
+          print(f"Simulation completed. Run length: {experiment.params['run_length']} days")
+          print(f"Total arrivals: {asu.total_arrivals}")
+          print(f"Final occupancy: {asu.occupancy}")
+          print(f"Number of occupancy audits: {len(experiment.asu_occupancy)}")
+          print(f"Average occupancy: {sum(experiment.asu_occupancy) / len(experiment.asu_occupancy):.2f}")
+          print(f"Maximum occupancy: {max(experiment.asu_occupancy)}")
+          print(f"Minimum occupancy: {min(experiment.asu_occupancy)}")
+          print(f"Simulation time at end of run: {env.now}")
+      
+          for patient_type in asu.patient_types.values():
+              print(f"Total {patient_type.name} arrivals: {patient_type.count}")
+      
+          # Calculate occupancy frequencies
+          rel_freq, cum_freq, unique_vals = calculate_occupancy_frequencies(experiment.asu_occupancy)
+      
+          # Calculate probability of delay
+          prob_delay = calculate_prob_delay(rel_freq, cum_freq)
+      
+          # Create and display the occupancy plot
+          fig, ax = occupancy_plot(rel_freq, unique_vals)
+          plt.show()
+      
+          # Create and display the probability of delay plot
+          fig, ax = prob_delay_plot(prob_delay, unique_vals)
+          plt.show()
+      
+      
+      if __name__ == "__main__":
+          run_model_with_audit()
+      
+  code cell:
+    id: 74c224e4-23a6-4ffa-b863-a689464c2825
+    source:
+      def run_rehabilitation_unit_model(run_length):
+          env = simpy.Environment()
+          ru = RehabilitationUnit(env)
+          env.run(until=run_length)
+      
+          print("\nSimulation completed.")
+          print(f"Total arrivals: {ru.total_arrivals}")
+          print(f"Final patient counts: {ru.patient_counts}")
+      
+      if __name__ == "__main__":
+          run_rehabilitation_unit_model(365 * 5)  # Run for 5 years