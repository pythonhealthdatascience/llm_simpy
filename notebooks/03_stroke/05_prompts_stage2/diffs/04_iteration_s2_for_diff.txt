(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ nbdiff 04_iteration_s2.ipynb diffs/04_iteration_s2_for_diff.ipynb
nbdiff 04_iteration_s2.ipynb diffs/04_iteration_s2_for_diff.ipynb
--- 04_iteration_s2.ipynb  2024-07-09 21:59:40.346017
+++ diffs/04_iteration_s2_for_diff.ipynb  2024-07-09 23:28:43.701061
## modified /cells/8/source:
@@ -2,6 +2,48 @@ import simpy
 import numpy as np
 import math
 
+class Experiment:
+    def __init__(self, params=None):
+        default_params = {
+            'run_length': 5 * 365,
+            'patient_types': {
+                'Stroke': {
+                    'interarrival_time': 1.2,
+                    'post_asu_probabilities': [0.24, 0.13, 0.63],
+                    'los_params': {'Rehab': (7.4, 8.6), 'ESD': (4.6, 4.8), 'Other': (7.0, 8.7)}
+                },
+                'TIA': {
+                    'interarrival_time': 9.3,
+                    'post_asu_probabilities': [0.01, 0.01, 0.98],
+                    'los_params': (1.8, 5.0)
+                },
+                'Complex Neurological': {
+                    'interarrival_time': 3.6,
+                    'post_asu_probabilities': [0.11, 0.05, 0.84],
+                    'los_params': (4.0, 5.0)
+                },
+                'Other': {
+                    'interarrival_time': 3.2,
+                    'post_asu_probabilities': [0.05, 0.10, 0.85],
+                    'los_params': (3.8, 5.2)
+                }
+            }
+        }
+        
+        if params is None:
+            self.params = default_params
+        else:
+            self.params = self.merge_params(default_params, params)
+
+    def merge_params(self, default, new):
+        merged = default.copy()
+        for key, value in new.items():
+            if isinstance(value, dict) and key in merged:
+                merged[key] = self.merge_params(merged[key], value)
+            else:
+                merged[key] = value
+        return merged
+
 class PatientType:
     def __init__(self, name, interarrival_time, post_asu_probabilities, los_params):
         self.name = name
@@ -23,56 +65,24 @@ class PatientType:
         else:
             mean, std = self.los_params
 
-        # Convert lognormal parameters
         normal_mean = math.log(mean**2 / math.sqrt(std**2 + mean**2))
         normal_std = math.sqrt(math.log(1 + (std**2 / mean**2)))
 
         return self.rng.lognormal(normal_mean, normal_std)
 
-class ASUModel:
-    def __init__(self, env, patient_params=None, run_length=5 * 365):
+class AcuteStrokeUnit:
+    def __init__(self, env, experiment):
         self.env = env
-        self.run_length = run_length
+        self.experiment = experiment
+        self.run_length = experiment.params['run_length']
         self.total_arrivals = 0
         
-        default_params = {
-            'Stroke': {
-                'interarrival_time': 1.2,
-                'post_asu_probabilities': [0.24, 0.13, 0.63],
-                'los_params': {'Rehab': (7.4, 8.6), 'ESD': (4.6, 4.8), 'Other': (7.0, 8.7)}
-            },
-            'TIA': {
-                'interarrival_time': 9.3,
-                'post_asu_probabilities': [0.01, 0.01, 0.98],
-                'los_params': (1.8, 5.0)
-            },
-            'Complex Neurological': {
-                'interarrival_time': 3.6,
-                'post_asu_probabilities': [0.11, 0.05, 0.84],
-                'los_params': (4.0, 5.0)
-            },
-            'Other': {
-                'interarrival_time': 3.2,
-                'post_asu_probabilities': [0.05, 0.10, 0.85],
-                'los_params': (3.8, 5.2)
-            }
-        }
-        
-        if patient_params is None:
-            patient_params = default_params
-        else:
-            # Merge provided params with defaults
-            for patient_type, params in default_params.items():
-                if patient_type in patient_params:
-                    params.update(patient_params[patient_type])
-                patient_params[patient_type] = params
-
         self.patient_types = {
             name: PatientType(name, 
                               params['interarrival_time'], 
                               params['post_asu_probabilities'], 
                               params['los_params'])
-            for name, params in patient_params.items()
+            for name, params in experiment.params['patient_types'].items()
         }
 
     def run(self):
@@ -97,7 +107,6 @@ class ASUModel:
             print(f"  Post-ASU destination: {post_asu_destination}")
             print(f"  Next {patient_type.name} arrival in {interarrival_time:.2f} days")
 
-            # Call acute treatment process
             self.env.process(self.acute_treatment(patient_type, patient_id, post_asu_destination))
 
     def acute_treatment(self, patient_type, patient_id, post_asu_destination):
@@ -138,9 +147,10 @@ class ASUModel:
         yield self.env.timeout(los)
         print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) finished acute treatment")
 
-def main(patient_params=None, run_length=5*365):
+def main(params=None):
+    experiment = Experiment(params)
     env = simpy.Environment()
-    model = ASUModel(env, patient_params, run_length)
+    model = AcuteStrokeUnit(env, experiment)
     model.run()
 
     print("\nSimulation completed.")

(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ 