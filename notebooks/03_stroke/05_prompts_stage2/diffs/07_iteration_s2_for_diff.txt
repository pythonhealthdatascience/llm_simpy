(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ nbdiff 07_iteration_s2.ipynb diffs/07_iteration_s2_for_diff.ipynb
nbdiff 07_iteration_s2.ipynb diffs/07_iteration_s2_for_diff.ipynb
--- 07_iteration_s2.ipynb  2024-07-10 01:44:08.168257
+++ diffs/07_iteration_s2_for_diff.ipynb  2024-07-10 09:15:01.434931
## modified /cells/11/source:
@@ -26,4 +26,188 @@ class PatientType:
         normal_mean = math.log(mean**2 / math.sqrt(std**2 + mean**2))
         normal_std = math.sqrt(math.log(1 + (std**2 / mean**2)))
 
-        return self.rng.lognormal(normal_mean, normal_std)

+        return self.rng.lognormal(normal_mean, normal_std)
+
+class Experiment:
+    def __init__(self, params=None):
+        default_params = {
+            'run_length': 5 * 365,
+            'trace': False,
+            'acute_audit_interval': 1,  # Default to 1 day
+            'patient_types': {
+                'Stroke': {
+                    'interarrival_time': 1.2,
+                    'post_asu_probabilities': [0.24, 0.13, 0.63],
+                    'los_params': {'Rehab': (7.4, 8.6), 'ESD': (4.6, 4.8), 'Other': (7.0, 8.7)}
+                },
+                'TIA': {
+                    'interarrival_time': 9.3,
+                    'post_asu_probabilities': [0.01, 0.01, 0.98],
+                    'los_params': (1.8, 5.0)
+                },
+                'Complex Neurological': {
+                    'interarrival_time': 3.6,
+                    'post_asu_probabilities': [0.11, 0.05, 0.84],
+                    'los_params': (4.0, 5.0)
+                },
+                'Other': {
+                    'interarrival_time': 3.2,
+                    'post_asu_probabilities': [0.05, 0.10, 0.85],
+                    'los_params': (3.8, 5.2)
+                }
+            }
+        }
+        
+        if params is None:
+            self.params = default_params
+        else:
+            self.params = self.merge_params(default_params, params)
+        
+        self.asu_occupancy = []  # Initialize the list to store occupancy
+
+    def merge_params(self, default, new):
+        merged = default.copy()
+        for key, value in new.items():
+            if isinstance(value, dict) and key in merged:
+                merged[key] = self.merge_params(merged[key], value)
+            else:
+                merged[key] = value
+        return merged
+
+    def audit_acute_occupancy(self, env, acute_audit_interval, asu):
+        while True:
+            yield env.timeout(acute_audit_interval)
+            self.asu_occupancy.append(asu.occupancy)
+
+class AcuteStrokeUnit:
+    def __init__(self, env, experiment):
+        self.env = env
+        self.experiment = experiment
+        self.run_length = experiment.params['run_length']
+        self.total_arrivals = 0
+        self.occupancy = 0
+        self.trace = experiment.params['trace']
+        
+        self.patient_types = {
+            name: PatientType(name, 
+                              params['interarrival_time'], 
+                              params['post_asu_probabilities'], 
+                              params['los_params'])
+            for name, params in experiment.params['patient_types'].items()
+        }
+
+    def run(self):
+        for patient_type in self.patient_types.values():
+            self.env.process(self.patient_generator(patient_type))
+        self.env.run(until=self.run_length)
+
+    def patient_generator(self, patient_type):
+        while True:
+            interarrival_time = patient_type.generate_interarrival_time()
+            yield self.env.timeout(interarrival_time)
+            
+            self.total_arrivals += 1
+            patient_type.count += 1
+            patient_id = self.total_arrivals - 1
+
+            post_asu_destination = patient_type.sample_post_asu_destination()
+
+            if self.trace:
+                print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) arrived")
+                print(f"  Total arrivals: {self.total_arrivals}")
+                print(f"  {patient_type.name} arrivals: {patient_type.count}")
+                print(f"  Post-ASU destination: {post_asu_destination}")
+                print(f"  Next {patient_type.name} arrival in {interarrival_time:.2f} days")
+
+            self.occupancy += 1
+            if self.trace:
+                print(f"  Current occupancy: {self.occupancy}")
+
+            self.env.process(self.acute_treatment(patient_type, patient_id, post_asu_destination))
+
+    def acute_treatment(self, patient_type, patient_id, post_asu_destination):
+        if patient_type.name == 'Stroke':
+            yield from self.stroke_acute_treatment(patient_type, patient_id, post_asu_destination)
+        elif patient_type.name == 'TIA':
+            yield from self.tia_acute_treatment(patient_type, patient_id)
+        elif patient_type.name == 'Complex Neurological':
+            yield from self.complex_neurological_acute_treatment(patient_type, patient_id)
+        else:  # Other
+            yield from self.other_acute_treatment(patient_type, patient_id)
+
+        self.occupancy -= 1
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) left ASU")
+            print(f"  Current occupancy: {self.occupancy}")
+
+    def stroke_acute_treatment(self, patient_type, patient_id, post_asu_destination):
+        los = patient_type.sample_length_of_stay(post_asu_destination)
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) starting acute treatment")
+            print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) finished acute treatment")
+
+    def tia_acute_treatment(self, patient_type, patient_id):
+        los = patient_type.sample_length_of_stay()
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) starting acute treatment")
+            print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) finished acute treatment")
+
+    def complex_neurological_acute_treatment(self, patient_type, patient_id):
+        los = patient_type.sample_length_of_stay()
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) starting acute treatment")
+            print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) finished acute treatment")
+
+    def other_acute_treatment(self, patient_type, patient_id):
+        los = patient_type.sample_length_of_stay()
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) starting acute treatment")
+            print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        if self.trace:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) finished acute treatment")
+
+def run_model_with_audit():
+    # Create the experiment
+    experiment = Experiment({
+        'run_length': 365*5,  # Run for 5 years
+        'trace': False,  # Set to True if you want to see detailed logs
+        'acute_audit_interval': 1  # Audit every 1 day
+    })
+
+    # Create the simulation environment
+    env = simpy.Environment()
+
+    # Create the AcuteStrokeUnit
+    asu = AcuteStrokeUnit(env, experiment)
+
+    # Start the audit process
+    env.process(experiment.audit_acute_occupancy(env, experiment.params['acute_audit_interval'], asu))
+
+    # Run the model
+    asu.run()
+
+    # Print the results
+    print(f"Simulation completed. Run length: {experiment.params['run_length']} days")
+    print(f"Total arrivals: {asu.total_arrivals}")
+    print(f"Final occupancy: {asu.occupancy}")
+    print(f"Number of occupancy audits: {len(experiment.asu_occupancy)}")
+    print(f"Average occupancy: {sum(experiment.asu_occupancy) / len(experiment.asu_occupancy):.2f}")
+    print(f"Maximum occupancy: {max(experiment.asu_occupancy)}")
+    print(f"Minimum occupancy: {min(experiment.asu_occupancy)}")
+    # Added by tester. Breakdown of patient arrivals by type was removed in this iteration.
+    print(f"Simulation time at end of run: {env.now = }") 
+    for patient_type in asu.patient_types.values():
+        print(f"Total {patient_type.name} arrivals: {patient_type.count}")
+
+if __name__ == "__main__":
+    run_model_with_audit()

## modified /cells/13/source:
@@ -1,42 +0,0 @@
-class Experiment:
-    def __init__(self, params=None):
-        default_params = {
-            'run_length': 5 * 365,
-            'trace': True,  # New parameter with default value False
-            'patient_types': {
-                'Stroke': {
-                    'interarrival_time': 1.2,
-                    'post_asu_probabilities': [0.24, 0.13, 0.63],
-                    'los_params': {'Rehab': (7.4, 8.6), 'ESD': (4.6, 4.8), 'Other': (7.0, 8.7)}
-                },
-                'TIA': {
-                    'interarrival_time': 9.3,
-                    'post_asu_probabilities': [0.01, 0.01, 0.98],
-                    'los_params': (1.8, 5.0)
-                },
-                'Complex Neurological': {
-                    'interarrival_time': 3.6,
-                    'post_asu_probabilities': [0.11, 0.05, 0.84],
-                    'los_params': (4.0, 5.0)
-                },
-                'Other': {
-                    'interarrival_time': 3.2,
-                    'post_asu_probabilities': [0.05, 0.10, 0.85],
-                    'los_params': (3.8, 5.2)
-                }
-            }
-        }
-        
-        if params is None:
-            self.params = default_params
-        else:
-            self.params = self.merge_params(default_params, params)
-
-    def merge_params(self, default, new):
-        merged = default.copy()
-        for key, value in new.items():
-            if isinstance(value, dict) and key in merged:
-                merged[key] = self.merge_params(merged[key], value)
-            else:
-                merged[key] = value
-        return merged

## modified /cells/15/source:
@@ -1,96 +0,0 @@
-class AcuteStrokeUnit:
-    def __init__(self, env, experiment):
-        self.env = env
-        self.experiment = experiment
-        self.run_length = experiment.params['run_length']
-        self.total_arrivals = 0
-        self.occupancy = 0
-        self.trace = experiment.params['trace']
-        
-        self.patient_types = {
-            name: PatientType(name, 
-                              params['interarrival_time'], 
-                              params['post_asu_probabilities'], 
-                              params['los_params'])
-            for name, params in experiment.params['patient_types'].items()
-        }
-
-    def run(self):
-        for patient_type in self.patient_types.values():
-            self.env.process(self.patient_generator(patient_type))
-        self.env.run(until=self.run_length)
-
-    def patient_generator(self, patient_type):
-        while True:
-            interarrival_time = patient_type.generate_interarrival_time()
-            yield self.env.timeout(interarrival_time)
-            
-            self.total_arrivals += 1
-            patient_type.count += 1
-            patient_id = self.total_arrivals - 1
-
-            post_asu_destination = patient_type.sample_post_asu_destination()
-
-            if self.trace:
-                print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) arrived")
-                print(f"  Total arrivals: {self.total_arrivals}")
-                print(f"  {patient_type.name} arrivals: {patient_type.count}")
-                print(f"  Post-ASU destination: {post_asu_destination}")
-                print(f"  Next {patient_type.name} arrival in {interarrival_time:.2f} days")
-
-            self.occupancy += 1
-            if self.trace:
-                print(f"  Current occupancy: {self.occupancy}")
-
-            self.env.process(self.acute_treatment(patient_type, patient_id, post_asu_destination))
-
-    def acute_treatment(self, patient_type, patient_id, post_asu_destination):
-        if patient_type.name == 'Stroke':
-            yield from self.stroke_acute_treatment(patient_type, patient_id, post_asu_destination)
-        elif patient_type.name == 'TIA':
-            yield from self.tia_acute_treatment(patient_type, patient_id)
-        elif patient_type.name == 'Complex Neurological':
-            yield from self.complex_neurological_acute_treatment(patient_type, patient_id)
-        else:  # Other
-            yield from self.other_acute_treatment(patient_type, patient_id)
-
-        self.occupancy -= 1
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) left ASU")
-            print(f"  Current occupancy: {self.occupancy}")
-
-    def stroke_acute_treatment(self, patient_type, patient_id, post_asu_destination):
-        los = patient_type.sample_length_of_stay(post_asu_destination)
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) starting acute treatment")
-            print(f"  Length of stay: {los:.2f} days")
-        yield self.env.timeout(los)
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) finished acute treatment")
-
-    def tia_acute_treatment(self, patient_type, patient_id):
-        los = patient_type.sample_length_of_stay()
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) starting acute treatment")
-            print(f"  Length of stay: {los:.2f} days")
-        yield self.env.timeout(los)
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) finished acute treatment")
-
-    def complex_neurological_acute_treatment(self, patient_type, patient_id):
-        los = patient_type.sample_length_of_stay()
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) starting acute treatment")
-            print(f"  Length of stay: {los:.2f} days")
-        yield self.env.timeout(los)
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) finished acute treatment")
-
-    def other_acute_treatment(self, patient_type, patient_id):
-        los = patient_type.sample_length_of_stay()
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) starting acute treatment")
-            print(f"  Length of stay: {los:.2f} days")
-        yield self.env.timeout(los)
-        if self.trace:
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) finished acute treatment")

## modified /cells/17/source:
@@ -1,14 +0,0 @@
-def main(params=None):
-    experiment = Experiment({'trace': False})
-    env = simpy.Environment()
-    model = AcuteStrokeUnit(env, experiment)
-    model.run()
-
-    print("\nSimulation completed.")
-    print(f"Total simulation time: {model.env.now:.2f} days")
-    print(f"Total patient arrivals: {model.total_arrivals}")
-    for patient_type in model.patient_types.values():
-        print(f"Total {patient_type.name} arrivals: {patient_type.count}")
-
-if __name__ == "__main__":
-    main()


(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ 