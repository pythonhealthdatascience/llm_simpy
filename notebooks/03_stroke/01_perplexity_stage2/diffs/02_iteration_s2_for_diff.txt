+++ diffs/01_iteration_s2_for_diff.ipynb  2024-06-28 11:24:48.627373
## modified /cells/15/source:
@@ -2,16 +2,20 @@ import simpy
 import numpy as np
 
 class PatientType:
-    def __init__(self, name, interarrival_time):
+    def __init__(self, name, interarrival_time, post_asu_probabilities):
         self.name = name
         self.interarrival_time = interarrival_time
         self.count = 0
         self.rng = np.random.default_rng()
+        self.post_asu_probabilities = post_asu_probabilities
 
     def generate_interarrival_time(self):
         return self.rng.exponential(self.interarrival_time)
 
-class ACUModel:
+    def sample_post_asu_destination(self):
+        return self.rng.choice(['Rehab', 'ESD', 'Other'], p=self.post_asu_probabilities)
+
+class ASUModel:
     def __init__(self, env, patient_params=None, run_length=5 * 365):
         self.env = env
         self.run_length = run_length
@@ -19,15 +23,15 @@ class ACUModel:
         
         if patient_params is None:
             self.patient_types = {
-                'Stroke': PatientType('Stroke', 1.2),
-                'TIA': PatientType('TIA', 9.3),
-                'Complex Neurological': PatientType('Complex Neurological', 3.6),
-                'Other': PatientType('Other', 3.2)
+                'Stroke': PatientType('Stroke', 1.2, [0.24, 0.13, 0.63]),
+                'TIA': PatientType('TIA', 9.3, [0.01, 0.01, 0.98]),
+                'Complex Neurological': PatientType('Complex Neurological', 3.6, [0.11, 0.05, 0.84]),
+                'Other': PatientType('Other', 3.2, [0.05, 0.10, 0.85])
             }
         else:
             self.patient_types = {
-                name: PatientType(name, interarrival_time)
-                for name, interarrival_time in patient_params.items()
+                name: PatientType(name, params['interarrival_time'], params['post_asu_probabilities'])
+                for name, params in patient_params.items()
             }
 
     def run(self):
@@ -44,9 +48,12 @@ class ACUModel:
             patient_type.count += 1
             patient_id = self.total_arrivals - 1
 
+            post_asu_destination = patient_type.sample_post_asu_destination()
+
             print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) arrived")
             print(f"  Total arrivals: {self.total_arrivals}")
             print(f"  {patient_type.name} arrivals: {patient_type.count}")
+            print(f"  Post-ASU destination: {post_asu_destination}")
             print(f"  Next {patient_type.name} arrival in {interarrival_time:.2f} days")
             print()
 
@@ -55,7 +62,7 @@ class ACUModel:
 
 def main(patient_params=None, run_length=5*365):
     env = simpy.Environment()
-    model = ACUModel(env, patient_params, run_length)
+    model = ASUModel(env, patient_params, run_length)
     model.run()
 
     print("\nSimulation completed.")
@@ -66,4 +73,3 @@ def main(patient_params=None, run_length=5*365):
 
 if __name__ == "__main__":
     main()
-

(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ nbdiff 02_iteration_s2.ipynb diffs/02_iteration_s2_for_diff.ipynb
nbdiff 02_iteration_s2.ipynb diffs/02_iteration_s2_for_diff.ipynb
--- 02_iteration_s2.ipynb  2024-06-28 11:26:04.979039
+++ diffs/02_iteration_s2_for_diff.ipynb  2024-06-28 12:54:58.192800
## modified /cells/9/source:
@@ -1,13 +1,15 @@
 import simpy
 import numpy as np
+import math
 
 class PatientType:
-    def __init__(self, name, interarrival_time, post_asu_probabilities):
+    def __init__(self, name, interarrival_time, post_asu_probabilities, los_params):
         self.name = name
         self.interarrival_time = interarrival_time
         self.count = 0
         self.rng = np.random.default_rng()
         self.post_asu_probabilities = post_asu_probabilities
+        self.los_params = los_params
 
     def generate_interarrival_time(self):
         return self.rng.exponential(self.interarrival_time)
@@ -15,24 +17,63 @@ class PatientType:
     def sample_post_asu_destination(self):
         return self.rng.choice(['Rehab', 'ESD', 'Other'], p=self.post_asu_probabilities)
 
+    def sample_length_of_stay(self, destination=None):
+        if self.name == 'Stroke':
+            mean, std = self.los_params[destination]
+        else:
+            mean, std = self.los_params
+
+        # Convert lognormal parameters
+        normal_mean = math.log(mean**2 / math.sqrt(std**2 + mean**2))
+        normal_std = math.sqrt(math.log(1 + (std**2 / mean**2)))
+
+        return self.rng.lognormal(normal_mean, normal_std)
+
 class ASUModel:
     def __init__(self, env, patient_params=None, run_length=5 * 365):
         self.env = env
         self.run_length = run_length
         self.total_arrivals = 0
         
-        if patient_params is None:
-            self.patient_types = {
-                'Stroke': PatientType('Stroke', 1.2, [0.24, 0.13, 0.63]),
-                'TIA': PatientType('TIA', 9.3, [0.01, 0.01, 0.98]),
-                'Complex Neurological': PatientType('Complex Neurological', 3.6, [0.11, 0.05, 0.84]),
-                'Other': PatientType('Other', 3.2, [0.05, 0.10, 0.85])
+        default_params = {
+            'Stroke': {
+                'interarrival_time': 1.2,
+                'post_asu_probabilities': [0.24, 0.13, 0.63],
+                'los_params': {'Rehab': (7.4, 8.6), 'ESD': (4.6, 4.8), 'Other': (7.0, 8.7)}
+            },
+            'TIA': {
+                'interarrival_time': 9.3,
+                'post_asu_probabilities': [0.01, 0.01, 0.98],
+                'los_params': (1.8, 5.0)
+            },
+            'Complex Neurological': {
+                'interarrival_time': 3.6,
+                'post_asu_probabilities': [0.11, 0.05, 0.84],
+                'los_params': (4.0, 5.0)
+            },
+            'Other': {
+                'interarrival_time': 3.2,
+                'post_asu_probabilities': [0.05, 0.10, 0.85],
+                'los_params': (3.8, 5.2)
             }
+        }
+        
+        if patient_params is None:
+            patient_params = default_params
         else:
-            self.patient_types = {
-                name: PatientType(name, params['interarrival_time'], params['post_asu_probabilities'])
-                for name, params in patient_params.items()
-            }
+            # Merge provided params with defaults
+            for patient_type, params in default_params.items():
+                if patient_type in patient_params:
+                    params.update(patient_params[patient_type])
+                patient_params[patient_type] = params
+
+        self.patient_types = {
+            name: PatientType(name, 
+                              params['interarrival_time'], 
+                              params['post_asu_probabilities'], 
+                              params['los_params'])
+            for name, params in patient_params.items()
+        }
 
     def run(self):
         for patient_type in self.patient_types.values():
@@ -55,10 +96,47 @@ class ASUModel:
             print(f"  {patient_type.name} arrivals: {patient_type.count}")
             print(f"  Post-ASU destination: {post_asu_destination}")
             print(f"  Next {patient_type.name} arrival in {interarrival_time:.2f} days")
-            print()
 
-            # Patient immediately leaves the model
-            # No additional processing needed
+            # Call acute treatment process
+            self.env.process(self.acute_treatment(patient_type, patient_id, post_asu_destination))
+
+    def acute_treatment(self, patient_type, patient_id, post_asu_destination):
+        if patient_type.name == 'Stroke':
+            yield from self.stroke_acute_treatment(patient_type, patient_id, post_asu_destination)
+        elif patient_type.name == 'TIA':
+            yield from self.tia_acute_treatment(patient_type, patient_id)
+        elif patient_type.name == 'Complex Neurological':
+            yield from self.complex_neurological_acute_treatment(patient_type, patient_id)
+        else:  # Other
+            yield from self.other_acute_treatment(patient_type, patient_id)
+
+    def stroke_acute_treatment(self, patient_type, patient_id, post_asu_destination):
+        los = patient_type.sample_length_of_stay(post_asu_destination)
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) starting acute treatment")
+        print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) finished acute treatment")
+
+    def tia_acute_treatment(self, patient_type, patient_id):
+        los = patient_type.sample_length_of_stay()
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) starting acute treatment")
+        print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) finished acute treatment")
+
+    def complex_neurological_acute_treatment(self, patient_type, patient_id):
+        los = patient_type.sample_length_of_stay()
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) starting acute treatment")
+        print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) finished acute treatment")
+
+    def other_acute_treatment(self, patient_type, patient_id):
+        los = patient_type.sample_length_of_stay()
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) starting acute treatment")
+        print(f"  Length of stay: {los:.2f} days")
+        yield self.env.timeout(los)
+        print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) finished acute treatment")
 
 def main(patient_params=None, run_length=5*365):
     env = simpy.Environment()