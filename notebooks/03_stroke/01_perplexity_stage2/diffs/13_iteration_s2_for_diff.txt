(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ nbdiff 13_iteration_s2.ipynb diffs/13_iteration_s2_for_diff.ipynb
nbdiff 13_iteration_s2.ipynb diffs/13_iteration_s2_for_diff.ipynb
--- 13_iteration_s2.ipynb  2024-07-13 00:53:45.684456
+++ diffs/13_iteration_s2_for_diff.ipynb  2024-07-13 03:40:53.091867
## modified /cells/18/source:
@@ -1,3 +1,7 @@
+import simpy
+import numpy as np
+import math
+
 class RehabilitationUnit:
     def __init__(self, env, experiment):
         self.env = env
@@ -8,12 +12,11 @@ class RehabilitationUnit:
             'Complex Neurological': 0,
             'Other': 0
         }
-
         # Inter-arrival time means (in days)
         self.stroke_iat_external = experiment.params['rehab_stroke_iat']
         self.complex_neuro_iat_external = experiment.params['rehab_neuro_iat']
         self.other_iat_external = experiment.params['rehab_other_iat']
-
+        
         # Start patient generators
         self.env.process(self.stroke_generator())
         self.env.process(self.complex_neuro_generator())
@@ -44,4 +47,56 @@ class RehabilitationUnit:
             print(f" Total arrivals: {self.total_arrivals}")
             print(f" {patient_type} arrivals: {self.patient_counts[patient_type]}")
             print(f" Current patient counts: {self.patient_counts}")
-            print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type}) left RU")
+        
+        self.env.process(self.rehab_treatment(patient_type, patient_id))
+
+    def rehab_treatment(self, patient_type, patient_id):
+        if patient_type == 'Stroke':
+            yield from self.stroke_rehab_treatment(patient_id)
+        elif patient_type == 'Complex Neurological':
+            yield from self.complex_neurological_rehab_treatment(patient_id)
+        else:
+            yield from self.other_rehab_treatment(patient_id)
+
+    def stroke_rehab_treatment(self, patient_id):
+        post_rehab_destination = np.random.choice(['ESD', 'Other'], p=[0.4, 0.6])
+        
+        if post_rehab_destination == 'ESD':
+            length_of_stay = np.random.lognormal(mean=np.log(30.3**2 / np.sqrt(23.1**2 + 30.3**2)), 
+                                                 sigma=np.sqrt(np.log(1 + (23.1**2 / 30.3**2))))
+        else:
+            length_of_stay = np.random.lognormal(mean=np.log(28.4**2 / np.sqrt(27.2**2 + 28.4**2)), 
+                                                 sigma=np.sqrt(np.log(1 + (27.2**2 / 28.4**2))))
+        
+        yield self.env.timeout(length_of_stay)
+        
+        if self.experiment.params['trace']:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) completed rehab treatment")
+            print(f" Post-rehab destination: {post_rehab_destination}")
+            print(f" Length of stay: {length_of_stay:.2f} days")
+
+    def complex_neurological_rehab_treatment(self, patient_id):
+        post_rehab_destination = np.random.choice(['ESD', 'Other'], p=[0.09, 0.91])
+        
+        length_of_stay = np.random.lognormal(mean=np.log(27.6**2 / np.sqrt(28.4**2 + 27.6**2)), 
+                                             sigma=np.sqrt(np.log(1 + (28.4**2 / 27.6**2))))
+        
+        yield self.env.timeout(length_of_stay)
+        
+        if self.experiment.params['trace']:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) completed rehab treatment")
+            print(f" Post-rehab destination: {post_rehab_destination}")
+            print(f" Length of stay: {length_of_stay:.2f} days")
+
+    def other_rehab_treatment(self, patient_id):
+        post_rehab_destination = np.random.choice(['ESD', 'Other'], p=[0.12, 0.88])
+        
+        length_of_stay = np.random.lognormal(mean=np.log(16.1**2 / np.sqrt(14.1**2 + 16.1**2)), 
+                                             sigma=np.sqrt(np.log(1 + (14.1**2 / 16.1**2))))
+        
+        yield self.env.timeout(length_of_stay)
+        
+        if self.experiment.params['trace']:
+            print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) completed rehab treatment")
+            print(f" Post-rehab destination: {post_rehab_destination}")
+            print(f" Length of stay: {length_of_stay:.2f} days")

(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ 