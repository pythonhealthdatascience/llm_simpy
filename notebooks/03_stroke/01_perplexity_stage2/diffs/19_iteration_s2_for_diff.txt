(base) alison@pop-os:~/Dropbox/code/LLM/llm_simpy$ cd notebooks/03_stroke/01_perplexity_stage2
(base) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ conda activate gen_simpy
(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/03_stroke/01_perplexity_stage2$ nbdiff 19_iteration_s2.ipynb diffs/19_iteration_s2_for_diff.ipynb
nbdiff 19_iteration_s2.ipynb diffs/19_iteration_s2_for_diff.ipynb
--- 19_iteration_s2.ipynb  2024-07-15 06:57:07.372071
+++ diffs/19_iteration_s2_for_diff.ipynb  2024-07-22 01:19:43.014231
## modified /cells/15/source:
@@ -8,17 +8,13 @@ class AcuteStrokeUnit:
         self.occupancy = 0
         self.trace = experiment.params['trace']
         self.patient_types = {
-            name: PatientType(name,
-                              params['interarrival_time'],
-                              params['post_asu_probabilities'],
-                              params['los_params'])
+            name: PatientType(name, params['interarrival_time'], params['post_asu_probabilities'], params['los_params'])
             for name, params in experiment.params['patient_types'].items()
         }
 
     def run(self):
         for patient_type in self.patient_types.values():
             self.env.process(self.patient_generator(patient_type))
-        self.env.run(until=self.run_length)
 
     def patient_generator(self, patient_type):
         while True:
@@ -28,36 +24,32 @@ class AcuteStrokeUnit:
             patient_type.count += 1
             patient_id = self.total_arrivals - 1
             post_asu_destination = patient_type.sample_post_asu_destination()
-
             if self.trace:
                 print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) arrived")
                 print(f" Total arrivals: {self.total_arrivals}")
                 print(f" {patient_type.name} arrivals: {patient_type.count}")
                 print(f" Post-ASU destination: {post_asu_destination}")
                 print(f" Next {patient_type.name} arrival in {interarrival_time:.2f} days")
-
             self.occupancy += 1
             if self.trace:
                 print(f" Current occupancy: {self.occupancy}")
-
             self.env.process(self.acute_treatment(patient_type, patient_id, post_asu_destination))
 
     def acute_treatment(self, patient_type, patient_id, post_asu_destination):
         if patient_type.name == 'Stroke':
-            yield from self.stroke_acute_treatment(patient_id, post_asu_destination)
+            yield from self.stroke_acute_treatment(patient_type, patient_id, post_asu_destination)
         elif patient_type.name == 'TIA':
             yield from self.tia_acute_treatment(patient_type, patient_id, post_asu_destination)
         elif patient_type.name == 'Complex Neurological':
             yield from self.complex_neurological_acute_treatment(patient_type, patient_id, post_asu_destination)
         else:  # Other
             yield from self.other_acute_treatment(patient_type, patient_id, post_asu_destination)
-
         self.occupancy -= 1
         if self.trace:
             print(f"Time {self.env.now:.2f}: Patient {patient_id} ({patient_type.name}) left ASU")
             print(f" Current occupancy: {self.occupancy}")
 
-    def stroke_acute_treatment(self, patient_id, post_asu_destination):
+    def stroke_acute_treatment(self, patient_type, patient_id, post_asu_destination):
         los = self.patient_types['Stroke'].sample_length_of_stay(post_asu_destination)
         if self.trace:
             print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) starting acute treatment")
@@ -65,6 +57,12 @@ class AcuteStrokeUnit:
         yield self.env.timeout(los)
         if self.trace:
             print(f"Time {self.env.now:.2f}: Patient {patient_id} (Stroke) finished acute treatment")
+        if post_asu_destination == "Rehab":
+            self.rehab_unit.occupancy += 1
+            self.rehab_unit.arrivals_from_asu +=1
+            self.env.process(self.rehab_unit.rehab_treatment(patient_type, patient_id))
+            if self.trace:
+                print(f" Post-ASU destination (stroke to stroke rehab): {post_asu_destination, patient_id}")
 
     def tia_acute_treatment(self, patient_type, patient_id, post_asu_destination):
         los = patient_type.sample_length_of_stay()
@@ -74,6 +72,12 @@ class AcuteStrokeUnit:
         yield self.env.timeout(los)
         if self.trace:
             print(f"Time {self.env.now:.2f}: Patient {patient_id} (TIA) finished acute treatment")
+        if post_asu_destination == "Rehab":
+            self.rehab_unit.occupancy += 1
+            self.rehab_unit.arrivals_from_asu +=1
+            self.env.process(self.rehab_unit.rehab_treatment(patient_type, patient_id))
+            if self.trace:
+                print(f" Post-ASU destination (tia to tia rehab): {post_asu_destination, patient_id}")
 
     def complex_neurological_acute_treatment(self, patient_type, patient_id, post_asu_destination):
         los = patient_type.sample_length_of_stay()
@@ -83,6 +87,12 @@ class AcuteStrokeUnit:
         yield self.env.timeout(los)
         if self.trace:
             print(f"Time {self.env.now:.2f}: Patient {patient_id} (Complex Neurological) finished acute treatment")
+        if post_asu_destination == "Rehab":
+            self.rehab_unit.occupancy += 1
+            self.rehab_unit.arrivals_from_asu +=1
+            self.env.process(self.rehab_unit.rehab_treatment(patient_type, patient_id))
+            if self.trace:
+                print(f" Post-ASU destination (complex to complex rehab): {post_asu_destination, patient_id}")
 
     def other_acute_treatment(self, patient_type, patient_id, post_asu_destination):
         los = patient_type.sample_length_of_stay()
@@ -92,3 +102,9 @@ class AcuteStrokeUnit:
         yield self.env.timeout(los)
         if self.trace:
             print(f"Time {self.env.now:.2f}: Patient {patient_id} (Other) finished acute treatment")
+        if post_asu_destination == "Rehab":
+            self.rehab_unit.occupancy += 1
+            self.rehab_unit.arrivals_from_asu +=1
+            self.env.process(self.rehab_unit.rehab_treatment(patient_type, patient_id))
+            if self.trace:
+                print(f" Post-ASU destination (other to other rehab): {post_asu_destination, patient_id}")


## modified /cells/17/source:
@@ -4,6 +4,7 @@ class RehabilitationUnit:
         self.experiment = experiment
         self.trace = experiment.params['trace']
         self.total_arrivals = 0
+        self.arrivals_from_asu = 0 #added by tester
         self.patient_counts = {
             'Stroke': 0,
             'Complex Neurological': 0,
@@ -16,10 +17,10 @@ class RehabilitationUnit:
         self.complex_neuro_iat_external = experiment.params['rehab_neuro_iat']
         self.other_iat_external = experiment.params['rehab_other_iat']
  
-        # Start patient generators
+    def run(self):    # Start patient generators
         self.env.process(self.stroke_generator())
         self.env.process(self.complex_neuro_generator())
-        self.env.process(self.other_generator())
+        self.env.process(self.other_generator())   
 
     def stroke_generator(self):
         while True: