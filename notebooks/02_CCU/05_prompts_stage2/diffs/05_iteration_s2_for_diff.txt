(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/02_CCU/01_perplexity_stage2$ nbdiff 05_iteration_s2.ipynb diffs/05_iteration_s2_for_diff.ipynb
nbdiff 05_iteration_s2.ipynb diffs/05_iteration_s2_for_diff.ipynb
--- 05_iteration_s2.ipynb  2024-06-05 16:41:20.204447
+++ diffs/05_iteration_s2_for_diff.ipynb  2024-06-05 16:47:54.373995
## modified /cells/9/source:
@@ -36,6 +36,9 @@ class CCU:
         self.patient_id_counter = 0
         self.cancelled_operations = 0
         self.warmup_end_time = self.experiment.warm_up_period
+        self.total_treatment_time = 0  # Initialize total treatment time
+        self.bed_utilization = 0  # Initialize bed utilization
+
         # Set up random number generators for each patient type
         self.rng_accident_emergency = np.random.default_rng(seed=42)
         self.rng_wards = np.random.default_rng(seed=43)
@@ -43,6 +46,7 @@ class CCU:
         self.rng_other_hospitals = np.random.default_rng(seed=45)
         self.rng_xray_department = np.random.default_rng(seed=46)
         self.rng_elective_surgery = np.random.default_rng(seed=47)
+
         # Set up critical care bed resource
         self.critical_care_beds = simpy.Resource(env, capacity=self.experiment.num_critical_care_beds)
 
@@ -101,6 +105,7 @@ class CCU:
         with self.critical_care_beds.request() as req:
             yield req
             print(f"Patient {patient_id} from {source} admitted to a critical care bed at {self.env.now:.2f} hours")
+
             # Determine length of stay based on source
             if source == "Accident and Emergency":
                 mu, sigma = self.lognormal_to_normal(self.experiment.accident_emergency_lognormal_mu, self.experiment.accident_emergency_lognormal_sigma)
@@ -117,8 +122,15 @@ class CCU:
             else:  # X-Ray Department
                 mu, sigma = self.lognormal_to_normal(self.experiment.xray_department_lognormal_mu, self.experiment.xray_department_lognormal_sigma)
                 length_of_stay = self.rng_xray_department.lognormal(mu, sigma)
+
             yield self.env.timeout(length_of_stay)
+
+            # Add treatment time to total if simulation time has exceeded warm-up period
+            if self.env.now >= self.warmup_end_time:
+                self.total_treatment_time += length_of_stay
+
             print(f"Patient {patient_id} from {source} discharged from a critical care bed at {self.env.now:.2f} hours")
+
             # Intensive cleaning
             yield self.env.timeout(self.experiment.intensive_cleaning_duration)
             print(f"Intensive cleaning completed for Patient {patient_id} from {source} at {self.env.now:.2f} hours")
@@ -138,7 +150,13 @@ class CCU:
                 print(f"Elective Patient {patient_id} admitted to a critical care bed at {self.env.now:.2f} hours")
                 length_of_stay = self.rng_elective_surgery.exponential(self.experiment.elective_surgery_treatment_rate)
                 yield self.env.timeout(length_of_stay)
+
+                # Add treatment time to total if simulation time has exceeded warm-up period
+                if self.env.now >= self.warmup_end_time:
+                    self.total_treatment_time += length_of_stay
+
                 print(f"Elective Patient {patient_id} discharged from a critical care bed at {self.env.now:.2f} hours")
+
                 # Intensive cleaning
                 yield self.env.timeout(self.experiment.intensive_cleaning_duration)
                 print(f"Intensive cleaning completed for Elective Patient {patient_id} at {self.env.now:.2f} hours")
@@ -151,11 +169,16 @@ class CCU:
         other_hospitals_process = self.env.process(self.other_hospitals_arrivals())
         xray_department_process = self.env.process(self.xray_department_arrivals())
         elective_surgery_process = self.env.process(self.elective_surgery_arrivals())
+
         self.env.run(until=self.experiment.total_run_length)
 
+        # Calculate bed utilization
+        self.bed_utilization = (self.total_treatment_time / (self.experiment.num_critical_care_beds * self.experiment.results_collection_period)) * 100
+
         # Calculate performance measures
         performance_measures = {
-            "Total Cancelled Elective Operations": self.cancelled_operations
+            "Total Cancelled Elective Operations": self.cancelled_operations,
+            "Bed Utilization (%)": self.bed_utilization
         }
 
         # Output results in a pandas dataframe

(gen_simpy) alison@pop-os:~/Dropbox/code/LLM/llm_simpy/notebooks/02_CCU/01_perplexity_stage2$ 